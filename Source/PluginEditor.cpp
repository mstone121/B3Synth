/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
B3synthAudioProcessorEditor::B3synthAudioProcessorEditor (B3synthAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
	initDrawbars();

    setSize (500, 300);
	getLookAndFeel().setDefaultSansSerifTypefaceName("Unifont");
}

B3synthAudioProcessorEditor::~B3synthAudioProcessorEditor()
{
}

//==============================================================================
void B3synthAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("B3", getLocalBounds(), Justification::centred, 1);	
}

void B3synthAudioProcessorEditor::resized()
{
	const int control_width = (getWidth() - (2 * MAIN_MARGIN)) / DRAWBAR_COUNT;
	const int control_height = CONTROL_HEIGHT;
	for (int i = 0; i < DRAWBAR_COUNT; ++i) {
		drawbars[i].setBounds(MAIN_MARGIN + (i * control_width), 30, control_width, control_height);
		drawbars[i].drawbar.setValue(processor.drawbar_values[i], dontSendNotification);
	}
}

void B3synthAudioProcessorEditor::initDrawbars()
{
	const juce::String labels[DRAWBAR_COUNT] = {
		DRAWBAR_LABEL_1,
		DRAWBAR_LABEL_2,
		DRAWBAR_LABEL_3,
		DRAWBAR_LABEL_4,
		DRAWBAR_LABEL_5,
		DRAWBAR_LABEL_6,
		DRAWBAR_LABEL_7,
		DRAWBAR_LABEL_8,
		DRAWBAR_LABEL_9
	};

	drawbars[DRAWBAR_COUNT];

	// Create and Display
	for (int i = 0; i < DRAWBAR_COUNT; ++i) {
		drawbars[i].setLabel(labels[i]);
		addAndMakeVisible(drawbars[i]);
		drawbars[i].drawbar.addListener(this);
	}
}

void B3synthAudioProcessorEditor::sliderValueChanged(Slider* slider) {
	for (int i = 0; i < DRAWBAR_COUNT; ++i)
		if (slider == &drawbars[i].drawbar) {
			processor.drawbar_values[i] = drawbars[i].drawbar.getValue();
			processor.updateWavetables();
		}
}
